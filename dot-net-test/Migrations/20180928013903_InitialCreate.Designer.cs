// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_test;

namespace dotnet_test.Migrations
{
    [DbContext(typeof(HealthcareContext))]
    [Migration("20180928013903_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dotnet_test.Models.Medic", b =>
                {
                    b.Property<int>("MedicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf");

                    b.Property<string>("Crm");

                    b.Property<DateTime>("LastAccess");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int?>("TypeSpecialityETypeUser");

                    b.HasKey("MedicID");

                    b.HasIndex("TypeSpecialityETypeUser");

                    b.ToTable("Medic");
                });

            modelBuilder.Entity("dotnet_test.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Obs");

                    b.HasKey("MedicineID");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("dotnet_test.Models.Medicines", b =>
                {
                    b.Property<int>("MedicinesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicineID");

                    b.Property<int?>("ScheduleTreatmentID");

                    b.HasKey("MedicinesID");

                    b.HasIndex("MedicineID");

                    b.HasIndex("ScheduleTreatmentID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("dotnet_test.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("LastAccess");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("PatientID");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("dotnet_test.Models.ScheduleTreatment", b =>
                {
                    b.Property<int>("ScheduleTreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicID");

                    b.Property<string>("Obs");

                    b.Property<int?>("PatientID");

                    b.Property<string>("Schedule");

                    b.Property<int?>("TreatmentID");

                    b.Property<int?>("TypeTreatmentETypeTreatment");

                    b.HasKey("ScheduleTreatmentID");

                    b.HasIndex("MedicID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("TypeTreatmentETypeTreatment");

                    b.ToTable("ScheduleTreatment");
                });

            modelBuilder.Entity("dotnet_test.Models.SystemUser", b =>
                {
                    b.Property<int>("SystemUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("LastAccess");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int?>("TypeUserETypeUser");

                    b.HasKey("SystemUserID");

                    b.HasIndex("TypeUserETypeUser");

                    b.ToTable("SystemUser");
                });

            modelBuilder.Entity("dotnet_test.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("TypeTreatmentETypeTreatment");

                    b.HasKey("TreatmentID");

                    b.HasIndex("TypeTreatmentETypeTreatment");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("dotnet_test.Models.TypeSpeciality", b =>
                {
                    b.Property<int>("ETypeUser");

                    b.HasKey("ETypeUser");

                    b.ToTable("TypeSpeciality");
                });

            modelBuilder.Entity("dotnet_test.Models.TypeTreatment", b =>
                {
                    b.Property<int>("ETypeTreatment");

                    b.HasKey("ETypeTreatment");

                    b.ToTable("TypeTreatment");
                });

            modelBuilder.Entity("dotnet_test.Models.TypeUser", b =>
                {
                    b.Property<int>("ETypeUser");

                    b.HasKey("ETypeUser");

                    b.ToTable("TypeUser");
                });

            modelBuilder.Entity("dotnet_test.Models.Medic", b =>
                {
                    b.HasOne("dotnet_test.Models.TypeSpeciality", "TypeSpeciality")
                        .WithMany("Medic")
                        .HasForeignKey("TypeSpecialityETypeUser");
                });

            modelBuilder.Entity("dotnet_test.Models.Medicines", b =>
                {
                    b.HasOne("dotnet_test.Models.Medicine", "Medicine")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineID");

                    b.HasOne("dotnet_test.Models.ScheduleTreatment", "ScheduleTreatment")
                        .WithMany("Medicines")
                        .HasForeignKey("ScheduleTreatmentID");
                });

            modelBuilder.Entity("dotnet_test.Models.ScheduleTreatment", b =>
                {
                    b.HasOne("dotnet_test.Models.Medic", "Medic")
                        .WithMany("ScheduleTreatment")
                        .HasForeignKey("MedicID");

                    b.HasOne("dotnet_test.Models.Patient", "Patient")
                        .WithMany("ScheduleTreatment")
                        .HasForeignKey("PatientID");

                    b.HasOne("dotnet_test.Models.Treatment")
                        .WithMany("TreatmentMedicine")
                        .HasForeignKey("TreatmentID");

                    b.HasOne("dotnet_test.Models.TypeTreatment", "TypeTreatment")
                        .WithMany()
                        .HasForeignKey("TypeTreatmentETypeTreatment");
                });

            modelBuilder.Entity("dotnet_test.Models.SystemUser", b =>
                {
                    b.HasOne("dotnet_test.Models.TypeUser", "TypeUser")
                        .WithMany("User")
                        .HasForeignKey("TypeUserETypeUser");
                });

            modelBuilder.Entity("dotnet_test.Models.Treatment", b =>
                {
                    b.HasOne("dotnet_test.Models.TypeTreatment", "TypeTreatment")
                        .WithMany("Treatment")
                        .HasForeignKey("TypeTreatmentETypeTreatment");
                });
#pragma warning restore 612, 618
        }
    }
}
